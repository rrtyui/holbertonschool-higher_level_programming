============================================
            Test 7 - base_geometry
============================================

"""This test works for the class "BaseGeometry"
to bring its attributes to use, the first thing
is to import 7-base_geometry"""

>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

CASE 1:
========

    >>> bg = BaseGeometry()
    >>> try:
    ...     print(bg.area())
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [Exception] area() is not implemented

CASE 2:
========

    >>> try:
    ...     bg.integer_validator()
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [TypeError] integer_validator() missing 2 required positional arguments: 'name' and 'value'

CASE 3:
========

    >>> try:
    ...     bg.integer_validator("age")
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [TypeError] integer_validator() missing 1 required positional argument: 'value'

CASE 4:
========

    >>> try:
    ...     bg.integer_validator("age", 1)
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    >>>

CASE 5:
========

    >>> try:
    ...     bg.integer_validator("age", 0)
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [ValueError] age must be greater than 0

CASE 6:
========

    >>> try:
    ...     bg.integer_validator("age", -4)
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [ValueError] age must be greater than 0

CASE 7:
========

    >>> try:
    ...     bg.integer_validator("age", "4")
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [TypeError] age must be an integer

CASE 8:
========

    >>> try:
    ...     bg.integer_validator("age", (4,))
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [TypeError] age must be an integer

CASE 9:
========

    >>> try:
    ...     bg.integer_validator("age", [3])
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [TypeError] age must be an integer

CASE 10:
=========

    >>> try:
    ...     bg.integer_validator("age", True)
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [TypeError] age must be an integer

CASE 11:
=========

    >>> try:
    ...     bg.integer_validator("age", {3, 4})
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [TypeError] age must be an integer

CASE 12:
=========

    >>> try:
    ...     bg.integer_validator("age", None)
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [TypeError] age must be an integer